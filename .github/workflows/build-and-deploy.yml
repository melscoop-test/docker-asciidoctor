name: "Build and Deploy"
on:

  workflow_dispatch
  
  ## Events from external actor, or from code pushed (includes tags pushed)
  # push:
  #  branches:
  #    - main
  #    - 'refs/tags/*'
  #  tags:
  #    - '*'

  # pull_request:
  ## Events from the GitHub UI (as when publishing a release)
  # When a release is "released" (draft or released published, no pre-release) - https://docs.github.com/en/developers/webhooks-and-events/webhook-events-and-payloads#release
  # release:
  # types: [released]
  # When a tag or branch is created in the GitHub UI
  # create:
  
jobs:
  build:
    runs-on: ubuntu-20.04
    env:
      CACHE_REGISTRY: ghcr.io
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Define custom env variables
        run: |
          echo "CACHE_REGISTRY_PREFIX=${CACHE_REGISTRY}/asciidoctor" >> $GITHUB_ENV
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Cache Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.CACHE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build
        run: |
          make build
      - name: Deploy Cache
        # Only upstream has the cache registry credential as PRs cannot be trusted
        if: github.event_name != 'pull_request'
        run: |
          make docker-cache
      - name: Install dependencies for Tests
        run: |
          sudo apt update
          sudo apt install -y --no-install-recommends bats
      - name: Test
        run: make test
      - name: Generate README
        run: make README
      #### Deployment Zone: only on main branch
      - name: Login to Docker Hub for Deployment
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Deploy
        if: github.event_name != 'pull_request'
        run: |
          export IMAGE_VERSION="$(echo ${GITHUB_REF#refs/tags/} | grep -v 'refs/heads')"
          export IMAGE_NAME="asciidoctor/docker-asciidoctor"
          git config --local user.name "${GITHUB_ACTOR}"
          git config --local user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          make deploy-README deploy
